version: '3'
networks:
  app-network:
    driver: bridge

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: eshop
    ports:
      - "3306:3306"
    volumes:
      - ./db_init/init_mysql.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10

  neo4j:
    image: neo4j:4.4
    container_name: neo4j_db
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./db_init/init_neo4j.cypher:/var/lib/neo4j/import/init_neo4j.cypher
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 10
  
  neo4j_setup:
    image: neo4j:4.4
    container_name: neo4j_setup
    depends_on:
      - neo4j
    links:
      - neo4j
    restart: "no"
    command: >
      bash -c "
      echo 'Waiting for Neo4j...';
      until cypher-shell -a bolt://neo4j:7687 -u neo4j -p password 'RETURN 1' > /dev/null 2>&1; do
        sleep 5;
      done;
      echo 'Neo4j is ready! Running Cypher script...';
      cat /var/lib/neo4j/import/init_neo4j.cypher | cypher-shell -a bolt://neo4j:7687 -u neo4j -p password;
      echo 'Cypher script executed successfully!';
      "
    volumes:
      - ./db_init/init_neo4j.cypher:/var/lib/neo4j/import/init_neo4j.cypher    
    networks:
      - app-network

  mongodb:
    image: mongo:8.0
    container_name: mongo_db
    ports:
      - "27017:27017"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: zookeeper:3.7
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network
      
  zookeeper_setup:
    image: zookeeper:3.7
    depends_on:
      - zookeeper
    links:
      - zookeeper
    command: sh /setup/startup.sh
    volumes:
      - ./:/setup
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: 'PLAINTEXT://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REQUEST_TIMEOUT_MS: 60000
      KAFKA_REPLICA_LAG_TIME_MAX_MS: 20000
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 30000
      KAFKA_CREATE_TOPICS: "clothes-topic:1:1,users-topic:1:1"
    depends_on:
      - zookeeper
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  app:
    image: ghcr.io/billalikakos/flask-etl:1.0
    container_name: app
    ports:
     - "5000:5000"
    depends_on:
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy    
    networks:
      - app-network
      
